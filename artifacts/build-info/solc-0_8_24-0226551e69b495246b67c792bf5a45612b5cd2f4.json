{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_24-0226551e69b495246b67c792bf5a45612b5cd2f4",
  "solcVersion": "0.8.24",
  "solcLongVersion": "0.8.24+commit.e11b9ed9",
  "userSourceNameMap": {
    "contracts/KipuBank.sol": "project/contracts/KipuBank.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "shanghai",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/KipuBank.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title KipuBank\n/// @notice A decentralized ETH vault with safety limits for deposits and withdrawals\n/// @dev Implements checks-effects-interactions pattern and uses custom errors for gas efficiency\ncontract KipuBank {\n    // ========== STATE VARIABLES ==========\n\n    /// @notice Maximum withdrawal amount per transaction (immutable for security)\n    uint256 public immutable MAX_WITHDRAW_PER_TX;\n\n    /// @notice Maximum total deposits the bank can accept\n    uint256 public bankCap;\n\n    /// @notice Mapping of user addresses to their vault balances\n    mapping(address => uint256) private balances;\n\n    /// @notice Mapping of user addresses to their total number of deposits\n    mapping(address => uint256) private depositCount;\n\n    /// @notice Mapping of user addresses to their total number of withdrawals\n    mapping(address => uint256) private withdrawalCount;\n\n    /// @notice Total amount deposited across all users\n    uint256 public totalDeposits;\n\n    // ========== EVENTS ==========\n\n    /// @notice Emitted when a user successfully deposits ETH\n    /// @param user The address of the user making the deposit\n    /// @param amount The amount of ETH deposited\n    event DepositMade(address indexed user, uint256 amount);\n\n    /// @notice Emitted when a user successfully withdraws ETH\n    /// @param user The address of the user making the withdrawal\n    /// @param amount The amount of ETH withdrawn\n    event WithdrawalMade(address indexed user, uint256 amount);\n\n    // ========== CUSTOM ERRORS ==========\n\n    /// @notice Error thrown when a deposit would exceed the bank's total deposit cap\n    error BankCapExceeded();\n\n    /// @notice Error thrown when a user attempts to withdraw more than their balance\n    error InsufficientBalance();\n\n    /// @notice Error thrown when a withdrawal amount exceeds the per-transaction limit\n    error WithdrawalLimitExceeded();\n\n    /// @notice Error thrown when an ETH transfer fails\n    error TransferFailed();\n\n    // ========== MODIFIERS ==========\n\n    /// @notice Validates that a deposit amount doesn't exceed the bank's capacity\n    /// @param _amount The amount to be deposited\n    modifier withinBankCap(uint256 _amount) {\n        if (totalDeposits + _amount > bankCap) revert BankCapExceeded();\n        _;\n    }\n\n    // ========== CONSTRUCTOR ==========\n\n    /// @notice Initializes the KipuBank contract with deposit and withdrawal limits\n    /// @dev Sets immutable MAX_WITHDRAW_PER_TX and state variable bankCap\n    /// @param _bankCap The maximum total deposits the bank can accept\n    /// @param _maxWithdraw The maximum amount that can be withdrawn per transaction\n    constructor(uint256 _bankCap, uint256 _maxWithdraw) {\n        require(_bankCap > 0, \"Bank cap must be greater than zero\");\n        require(_maxWithdraw > 0, \"Max withdraw must be greater than zero\");\n\n        bankCap = _bankCap;\n        MAX_WITHDRAW_PER_TX = _maxWithdraw;\n    }\n\n    // ========== EXTERNAL FUNCTIONS ==========\n\n    /// @notice Allows users to deposit ETH into their personal vault\n    /// @dev Uses withinBankCap modifier to ensure deposit doesn't exceed bank capacity\n    /// @dev Emits DepositMade event on success\n    function deposit() external payable withinBankCap(msg.value) {\n        require(msg.value > 0, \"Deposit amount must be greater than zero\");\n\n        // Effects: Update state before external interactions\n        balances[msg.sender] += msg.value;\n        depositCount[msg.sender] += 1;\n        totalDeposits += msg.value;\n\n        emit DepositMade(msg.sender, msg.value);\n    }\n\n    /// @notice Allows users to withdraw ETH from their vault with safety limits\n    /// @dev Follows checks-effects-interactions pattern to prevent reentrancy\n    /// @dev Emits WithdrawalMade event on success\n    /// @param amount The amount of ETH to withdraw\n    function withdraw(uint256 amount) external {\n        // Checks: Validate withdrawal constraints\n        if (amount > MAX_WITHDRAW_PER_TX) revert WithdrawalLimitExceeded();\n        if (amount > balances[msg.sender]) revert InsufficientBalance();\n        require(amount > 0, \"Withdrawal amount must be greater than zero\");\n\n        // Effects: Update state before external call\n        balances[msg.sender] -= amount;\n        withdrawalCount[msg.sender] += 1;\n        totalDeposits -= amount;\n\n        emit WithdrawalMade(msg.sender, amount);\n\n        // Interactions: External call comes last\n        _safeTransfer(msg.sender, amount);\n    }\n\n    /// @notice Returns the vault balance for a specific user\n    /// @param user The address to check the balance for\n    /// @return The balance of the specified user\n    function getVaultBalance(address user) external view returns (uint256) {\n        return balances[user];\n    }\n\n    /// @notice Returns the number of deposits made by a user\n    /// @param user The address to check\n    /// @return The number of deposits\n    function getDepositCount(address user) external view returns (uint256) {\n        return depositCount[user];\n    }\n\n    /// @notice Returns the number of withdrawals made by a user\n    /// @param user The address to check\n    /// @return The number of withdrawals\n    function getWithdrawalCount(address user) external view returns (uint256) {\n        return withdrawalCount[user];\n    }\n\n    // ========== PRIVATE FUNCTIONS ==========\n\n    /// @notice Safely transfers ETH to a recipient\n    /// @dev Uses low-level call to transfer ETH and checks for success\n    /// @param to The recipient address\n    /// @param amount The amount of ETH to transfer\n    function _safeTransfer(address to, uint256 amount) private {\n        (bool success, ) = to.call{value: amount}(\"\");\n        if (!success) revert TransferFailed();\n    }\n}\n"
      }
    }
  }
}